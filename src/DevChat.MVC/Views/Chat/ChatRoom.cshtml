@using DevChat.MVC.Models
@using System.Text.Json

@model ChatModel

<style type="text/css">
    .containerChat {
        background-color: #99CCFF;
        border: thick solid #808080;
        padding: 20px;
        margin: 20px;
    }
</style>

<div class="containerChat">
    <input type="text" id="message" />
    <input type="button" id="sendmessage" value="Send" />
    <ul id="discussion"></ul>
</div>

<!--Script references. -->
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<!--Reference the SignalR library. -->
<script type="text/javascript" src="~/js/signalr.min.js"></script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
    $(document).ready(function(){
        let messages = JSON.parse('@Html.Raw(JsonSerializer.Serialize(ViewBag.Messages))');
        
        $.each(messages, function (index, value){
            let user = value.User.Name;
            let content = value.Content;

            $("#discussion").append($("<li>").append('<strong>' + user + '</strong>:&nbsp;&nbsp;' + content));
        });
    });

    document.addEventListener('DOMContentLoaded', function () {

        let messageInput = document.getElementById('message');

        // Get the user name and store it to prepend to messages.
        let name = '@ViewBag.User.Name';
        // Set initial focus to message input box.
        messageInput.focus();

        // Start the connection.
        let connection = new signalR.HubConnectionBuilder()
                            .withUrl('/chatRoom')
                            .build();

        // Create a function that the hub can call to broadcast messages.
        let roomName = 'room' + '@Model.ChatRooms.First().Id.ToString()';
        let user = '@Model.User.Id.ToString()';

        connection.on(roomName, function (name, message) {
            // Html encode display name and message.
            let encodedName = name;
            let encodedMsg = message;
            // Add the message to the page.
            let liElement = document.createElement('li');
            liElement.innerHTML = '<strong>' + encodedName + '</strong>:&nbsp;&nbsp;' + encodedMsg;
            document.getElementById('discussion').appendChild(liElement);
        });

        // Transport fallback functionality is now built into start.
        connection.start()
            .then(function () {
                console.log('connection started');
                document.getElementById('sendmessage').addEventListener('click', function (event) {
                    // Call the Send method on the hub.
                    connection.invoke('send', roomName, user, messageInput.value);

                    // Clear text box and reset focus for next comment.
                    messageInput.value = '';
                    messageInput.focus();
                    event.preventDefault();
                });
        })
        .catch(error => {
            console.error(error.message);
        });
    });
</script>